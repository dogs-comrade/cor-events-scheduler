name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dogs-comrade/events-scheduler
  NAMESPACE: events-scheduler

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      image_sha: ${{ steps.sha_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}}
            
      - name: Generate SHA tag
        id: sha_tag
        run: |
          SHA_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"
          echo "tag=${SHA_TAG}" >> $GITHUB_OUTPUT
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.sha_tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  deploy:
    needs: build
    runs-on: ['self-hosted', 'k8s']
    steps:
      - uses: actions/checkout@v4
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
      - name: Update Secrets
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: events-scheduler-secrets
            namespace: ${{ env.NAMESPACE }}
          type: Opaque
          data:
            db_user: ${{ secrets.DB_USER_BASE64 }}
            db_password: ${{ secrets.DB_PASSWORD_BASE64 }}
          EOF
          
      - name: Deploy manifests
        run: |
          # Create temp deployment file
          cp k8s/base/deployment.yaml k8s/base/deployment-temp.yaml
          
          # Replace variables
          sed -i "s|\${DOCKER_REGISTRY}|${{ env.REGISTRY }}|g" k8s/base/deployment-temp.yaml
          sed -i "s|\${TAG}|sha-${{ github.sha }}|g" k8s/base/deployment-temp.yaml
          
          # Apply manifests
          kubectl apply -f k8s/base/config.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/base/service.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/base/deployment-temp.yaml -n ${{ env.NAMESPACE }}
          
          rm k8s/base/deployment-temp.yaml

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=ready pod -l app=events-scheduler -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl get pods,svc -n ${{ env.NAMESPACE }}